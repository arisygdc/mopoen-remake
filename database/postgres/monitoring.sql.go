// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: monitoring.sql

package postgres

import (
	"context"

	"github.com/google/uuid"
)

const createMonitoringTerdaftar = `-- name: CreateMonitoringTerdaftar :exec
INSERT INTO monitoring_terdaftar (id, tipe_sensor_id, lokasi_id, nama, keterangan) VALUES ($1, $2, $3, $4, $5)
`

type CreateMonitoringTerdaftarParams struct {
	ID           uuid.UUID `json:"id"`
	TipeSensorID int32     `json:"tipe_sensor_id"`
	LokasiID     int32     `json:"lokasi_id"`
	Nama         string    `json:"nama"`
	Keterangan   string    `json:"keterangan"`
}

func (q *Queries) CreateMonitoringTerdaftar(ctx context.Context, arg CreateMonitoringTerdaftarParams) error {
	_, err := q.db.ExecContext(ctx, createMonitoringTerdaftar,
		arg.ID,
		arg.TipeSensorID,
		arg.LokasiID,
		arg.Nama,
		arg.Keterangan,
	)
	return err
}

const createMonitoringValue = `-- name: CreateMonitoringValue :exec
INSERT INTO monitoring_data (monitoring_terdaftar, value) VALUES ($1, $2)
`

type CreateMonitoringValueParams struct {
	MonitoringTerdaftar uuid.UUID `json:"monitoring_terdaftar"`
	Value               float64   `json:"value"`
}

func (q *Queries) CreateMonitoringValue(ctx context.Context, arg CreateMonitoringValueParams) error {
	_, err := q.db.ExecContext(ctx, createMonitoringValue, arg.MonitoringTerdaftar, arg.Value)
	return err
}

const getMonitoringData = `-- name: GetMonitoringData :many
SELECT (value) FROM monitoring_data WHERE monitoring_terdaftar = $1
`

func (q *Queries) GetMonitoringData(ctx context.Context, monitoringTerdaftar uuid.UUID) ([]float64, error) {
	rows, err := q.db.QueryContext(ctx, getMonitoringData, monitoringTerdaftar)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []float64
	for rows.Next() {
		var value float64
		if err := rows.Scan(&value); err != nil {
			return nil, err
		}
		items = append(items, value)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMonitoringTerdaftar = `-- name: GetMonitoringTerdaftar :one
SELECT id, tipe_sensor_id, lokasi_id, nama, keterangan FROM monitoring_terdaftar WHERE id = $1
`

func (q *Queries) GetMonitoringTerdaftar(ctx context.Context, id uuid.UUID) (MonitoringTerdaftar, error) {
	row := q.db.QueryRowContext(ctx, getMonitoringTerdaftar, id)
	var i MonitoringTerdaftar
	err := row.Scan(
		&i.ID,
		&i.TipeSensorID,
		&i.LokasiID,
		&i.Nama,
		&i.Keterangan,
	)
	return i, err
}

const getMonitoringTerdaftarByLokasi = `-- name: GetMonitoringTerdaftarByLokasi :many
SELECT id, tipe_sensor_id, lokasi_id, nama, keterangan FROM monitoring_terdaftar WHERE lokasi_id = $1
`

func (q *Queries) GetMonitoringTerdaftarByLokasi(ctx context.Context, lokasiID int32) ([]MonitoringTerdaftar, error) {
	rows, err := q.db.QueryContext(ctx, getMonitoringTerdaftarByLokasi, lokasiID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MonitoringTerdaftar
	for rows.Next() {
		var i MonitoringTerdaftar
		if err := rows.Scan(
			&i.ID,
			&i.TipeSensorID,
			&i.LokasiID,
			&i.Nama,
			&i.Keterangan,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
